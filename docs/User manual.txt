- Установка на Windows: скачать архив, распаковать
    * Все программы работают под Windows
    * Для SPH2D_CL может потребоваться обновление драйвера видеокарты (проверьте поддержку OpenCL, минимум 1.2)
    * Для SPH2D_Drawer и SPH2D_PicGen требуется библиотека SDL2. Добавьте в системную переменную Path пути к папкам *\lib\x64
    * Для работы скриптов генерации частиц потребуется установка Python3 и numpy
- Установка на Linux: только через сборку, недоступен SPH2DParamsGenerator
    * Требуются CMake, make, git, g++
    * Установить dev бибиотеки: OpenMP, OpenCL, SDL2
    * Сборка:
    git clone https://github.com/RackotRR/SPH2D
    git submodule update --init --remote
    Если не нужны инструменты, либо не установлены соответствующие билиотеки, закомментировать соответствующую строку в CMakeLists.txt
    cmake -S . -B out -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
    cmake --build out
    cmake --install out
    Появится папка ./install/SPH2D/ с программами
- Запуск эксперимента:
    1) Генерация частиц:
        * Через скрипт: редактируем скрипт и запускаем его. Будет создана директория с файлом ParticleParams.json и начальным состоянием
        * Через SPH2D_PicGen: 
            * запускаем и закрываем: создаётся директория PicGenDefault с файлом параметров по умолчанию PicGenParams.json
            * редактируем файл параметров:
                + delta - расстояние между частицами в метрах (размер пикселя)
                + x_mingeom, y_mingeom - координата левого нижнего пикселя
                + use_chess_order - использование шахматного порядка граничных частиц (не реализовано)
                + rho0 - плотность частиц
            * создаём изображение Particles.bmp, где каждый пиксель - частица, цвет влияет на тип частицы:
                + RGB{ 0, 0, 0 } - частица границы
                + RGB{ 255, 0, 0 } - частица генератора волн (либо часть поршня, либо часть исчезающей стенки)
                + RGB{ 0, 0, 255 } - частица жидкости
            * создаём директорию для эксперимента (либо переименовываем созданную), копируем туда файл PicGenParams.json и Particles.bmp
            * запускаем SPH2D_PicGen, выбираем нужную директорию: будет создан файл ParticleParams.json и начальное состояние
    2) Генерация параметров модели:
        * Вручную: создаём в директории эксперимента файл с параметрами модели
        * SPH2DParamsGenerator:
            * запускаем файл SPH2DParamsGenerator/SPH2DParamsGenerator.exe (рекомендую создать ярлык уровнем выше)
            * редактируем параметры модели с нуля
            * открываем существующий файл ModelParams.json и редактируем параметры на его основе
            * сохраняем параметры модели, указывая директрию эксперимента, будет создан файл ModelParams.json
    3) Запуск эксперимента:
        * запускаем SPH2D_CL (вычисления на видеокарте) или SPH2D_OMP (вычисления на процессоре)
        * указываем директорию с параметрами и начальным состоянием (если всё создано корректно, то она будет пронумерована)
        * будут созданы:
            + файл SPH2DParams.json - параметры запуска эксперимента
            + файл logs.txt - лог эксперимента
            + директория data - выходные данные эксперимента
            + файл crash_dump_{номер временного слоя}.csv - дамп в случае преждевременного завершения эксперимента
            + директория analysis - директория для утилит пост-обработки
        3.1) Выходные данные эксперимента:
            * обязательные параметры: r, itype
            * dump - данные для запуска эксперимента (не редактируются)
                + vx, vy - обязательные параметры
            * save - выходные данные для обработки и визуализации (задаются в параметрах)
                + vx, vy, p, ускорения (необязательные параметры)
    4) Визуализация результатов моделирования:
        * запускаем SPH2D_Drawer: будет выбор эксперимента для визуализации
        * с помощью мыши можно передвигать область просмотра
        * горячие клавиши: 
            + A/D - перемещение по временным слоям по одному за клик
            + W/S - перемещение по временным слоям, пока клавиша нажата
            + Space - запуск/остановка автоматического перемещения по слоям
            + Z/X - регулировка времени отображения каждого временного слоя при анимации
            + Enter - перемещение на первый временной слой
            + IJKL - перемещение области просмотра по пространству
            + Q/E - масштабирование области просмотра
            + C - сделать скриншот (сохраняется в соответствующую директорию)
            + F1 - переключение в режим команд (становится активной консоль)
        * запись видео: требуется установленная программа ffmpeg
            + нажимаем клавишу V и не отпускаем до окончания записи
            + при повторном нажатии будет создана новая запись
            + переключаем временные слои анимацией или горячими клавишами
            + при записи создаются скриншоты каждого временного слоя, на который перешли
            + после завершения записи создаётся файл с расширением .bat, который необходимо запустить, чтобы смонтировать видео
        * команды:
            + help - вывести основные подсказки и команды, для каждой команды доступно { команда } help, например: set help
            + heatmap - настройка тепловой карты визуализации
            + set - установить значение переменной
            + default - привести значения переменных к состоянию "по умолчанию"
            + label - установить надпись
            + vlabel - установить надпись с переменной (в данный момент не реализована в полной мере)
            + exit - выйти из режима ввода команд
    5) Построение графика значения функции в точке:
        * запускаем FuncAtPoint, выбираем эксперимент
        * вводим имя перменной (доступны p, vx, vy)
        * вводим координату точки
        * в директории analysis появятся файлы с расширением .txt (для визуализации в yotx.ru) и .csv (для других сервисов)
    6) Построение профиля жидкости:
        * запускаем WaterProfile, выбираем эксперимент
        * создаётся файл HeightTestingParams.json с параметрами измерения профиля по умолчанию
        * редактируем параметры измерения профиля:
            * mode == "space" - профиль по пространству, заполняем параметры:
                + t - массив моментов времени в секундах, для которых строится профиль
                + x0 - смещение профиля по оси Х (по умолчанию 0)
                + x_k - коэффициент обезразмеривания по оси Х (по умолчанию 1)
            * mode == "time" - профиль по времени, заполняем параметры:
                + x - массив точек, в которых будет измеряться глубина
                + t0 - смещение профиля по времени (по умолчанию 0)
                + t_k - коэффициент обезразмеривания по времени (по умолчанию 1)
            + y0 - смещение профиля по оси Y (по умолчанию 0)
            + y_k - коэффициент обезразмеривания по оси Y (по умолчанию 1)
            + postfix - постфикс файлов для идентификации тестов
        * нажимаем [enter] в консоли WaterProfile
        * в директории analysis появятся файлы с расширением .csv, содержащие таблицы высот